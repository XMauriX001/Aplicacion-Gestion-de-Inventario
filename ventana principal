from PyQt6.QtWidgets import (
    QMainWindow, QWidget, QStackedWidget, QVBoxLayout, QHBoxLayout,
    QLabel, QPushButton, QLineEdit, QMessageBox
)
from PyQt6.QtCore import Qt
from PyQt6.QtGui import QPixmap
import mysql.connector
from mysql.connector import Error

class LoginWidget(QWidget):
    def __init__(self, cambiar_pantalla):
        super().__init__()
        self.cambiar_pantalla = cambiar_pantalla
        self.setWindowTitle("Login")
        self.scale = 60

        self.setMinimumSize(16*self.scale, 9*self.scale)

        #form input widgets
        self.form = QWidget()
        self.form.setMaximumHeight(350)
        #self.setStyleSheet("border: 1px solid red;")  # para ver margenes y estructura de widgets

        # FORM principal
        self.form = QWidget()
        self.form.setMaximumHeight(350)

        # FORM INPUT
        self.form_input = QWidget()
        self.form_input.setMaximumHeight(300)

        # Título
        self.title = QLabel("Login")
        self.title.setAlignment(Qt.AlignmentFlag.AlignCenter)
        self.title.setStyleSheet("font-size: 36px; font-weight: bold;")
        self.title.setMaximumHeight(50)

        # Inputs
        self.user = QLineEdit()
        self.user.setPlaceholderText("Usuario")
        self.user.setTextMargins(22, 0, 0, 0)
        self.user.setMinimumSize(int(self.form.width() * 0.6), 50)
        self.user.setStyleSheet("border-radius: 15px;")

        self.password = QLineEdit()
        self.password.setPlaceholderText("Contraseña")
        self.password.setEchoMode(QLineEdit.EchoMode.Password)
        self.password.setTextMargins(22, 0, 0, 0)
        self.password.setMinimumSize(int(self.form.width() * 0.6), 50)
        self.password.setStyleSheet("border-radius: 15px;")

        # Botón login
        self.login_btn = QPushButton("Ingresar")
        self.login_btn.setMinimumSize(int(self.form.width() * 0.6), 50)
        self.login_btn.setStyleSheet(
    "border-radius: 15px; background-color: #64d169; font-size: 18px; font-weight: bold;")
        self.login_btn.setCursor(Qt.CursorShape.PointingHandCursor)
        self.login_btn.clicked.connect(self.verificar_credenciales)

        # Imagen
        self.img = QLabel()
        self.pixmap = QPixmap("proyecto/images/loginpic.png").scaled(475, 650)
        self.img.setPixmap(self.pixmap)

        # Layouts
        form_input_layout = QVBoxLayout()
        form_input_layout.addWidget(self.user)
        form_input_layout.addWidget(self.password)
        form_input_layout.addWidget(self.login_btn)
        form_input_layout.setSpacing(10)
        self.form_input.setLayout(form_input_layout)

        form_layout = QVBoxLayout()
        form_layout.addWidget(self.title)
        form_layout.addWidget(self.form_input)
        form_layout.setSpacing(10)
        self.form.setLayout(form_layout)

        general_layout = QHBoxLayout()
        general_layout.addWidget(self.img)
        general_layout.addWidget(self.form)
        general_layout.setContentsMargins(0, 0, 0, 0)

        self.setLayout(general_layout)



    def conectar_bd(self):
        try:
            conexion = mysql.connector.connect(
                host='localhost',
                user='root',
                password='1234',
                database='inventario - vivero cafe el arco',
                port=3307
            )
            if conexion.is_connected():
                return conexion
        except Error as e:
            print("Error al conectar a la base de datos:", e)
            return None

    def verificar_credenciales(self):
        usuario = self.user.text()
        contrasena = self.password.text()

        conexion = self.conectar_bd()
        if conexion:
            cursor = conexion.cursor()
            consulta = "SELECT * FROM usuarios WHERE usuario = %s AND contrasena = %s"
            cursor.execute(consulta, (usuario, contrasena))
            resultado = cursor.fetchone()

            if resultado:
                QMessageBox.information(self, "Acceso", "Inicio de sesión exitoso.")
                cursor.close()
                conexion.close()
                self.cambiar_pantalla(1)  # Cambia a la pantalla menú
            else:
                QMessageBox.warning(self, "Acceso denegado", "Usuario o contraseña incorrectos.")
                cursor.close()
                conexion.close()
        else:
            QMessageBox.critical(self, "Error", "No se pudo conectar a la base de datos.")

class MenuWidget(QWidget):
    def __init__(self, cambiar_pantalla):
        super().__init__()
        self.cambiar_pantalla = cambiar_pantalla
        #self.setStyleSheet("border: 1px solid red;")  # para ver margenes y estructura de widgets

        label = QLabel("Menú Principal")
        label.setAlignment(Qt.AlignmentFlag.AlignTop)
        label.setAlignment(Qt.AlignmentFlag.AlignHCenter)
        label.setStyleSheet("font-size: 24px; font-weight: bold;")
        label.setMaximumHeight(50)


        #Botones del menu
        btn_opcion1 = QPushButton("Ver inventario")
        btn_opcion1.setMinimumSize(int(self.width() * 0.6), 50)
        btn_opcion1.setStyleSheet(
    "border-radius: 15px; background-color: #437057; font-size: 15px; font-weight: bold;")
        btn_opcion1.setCursor(Qt.CursorShape.PointingHandCursor)
        
        #conexion btn 1
        btn_opcion1.clicked.connect(lambda: self.cambiar_pantalla(2))

        btn_opcion2 = QPushButton("Ver movimientos")
        btn_opcion2.setMinimumSize(int(self.width() * 0.6), 50)
        btn_opcion2.setStyleSheet(
    "border-radius: 15px; background-color: #437057; font-size: 15px; font-weight: bold;")
        btn_opcion2.setCursor(Qt.CursorShape.PointingHandCursor)

        #conexion boton2 
        btn_opcion2.clicked.connect(lambda: self.cambiar_pantalla(3))

        btn_opcion3 = QPushButton("Ver menu restaurante")
        btn_opcion3.setMinimumSize(int(self.width() * 0.6), 50)
        btn_opcion3.setStyleSheet(
    "border-radius: 15px; background-color: #437057; font-size: 15px; font-weight: bold;")
        btn_opcion3.setCursor(Qt.CursorShape.PointingHandCursor)

        #conexion btn 3
        btn_opcion3.clicked.connect(lambda: self.cambiar_pantalla(4))

        btn_cerrar_sesion = QPushButton("Cerrar sesión")
        btn_cerrar_sesion.setMinimumSize(int(self.width() * 0.6), 50)
        btn_cerrar_sesion.setStyleSheet(
    "border-radius: 15px; background-color: #859F3D; font-size: 15px; font-weight: bold;")
        btn_cerrar_sesion.setCursor(Qt.CursorShape.PointingHandCursor)

        #conexion btn cerrar sesion
        btn_cerrar_sesion.clicked.connect(lambda: self.cambiar_pantalla(0))

        layout = QVBoxLayout()
        layout2=QVBoxLayout()
        layout2.setAlignment(Qt.AlignmentFlag.AlignBottom)
        #layout2.setAlignment(Qt.AlignmentFlag.AlignVCenter)


        layout.addWidget(label)
        layout2.addWidget(btn_opcion1)
        layout2.addWidget(btn_opcion2)
        layout2.addWidget(btn_opcion3)
        layout2.addWidget(btn_cerrar_sesion)

        general_layout=QVBoxLayout()
        general_layout.addLayout(layout)
        general_layout.addLayout(layout2)
        self.setLayout(general_layout)
        

class Opcion1Widget(QWidget):
    def __init__(self, cambiar_pantalla):
        super().__init__()
        self.cambiar_pantalla = cambiar_pantalla

        label = QLabel("Inventario")
        label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        label.setStyleSheet("font-size: 20px;")

        btn_volver = QPushButton("Volver al menú")
        btn_volver.clicked.connect(lambda: self.cambiar_pantalla(1))

        layout = QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(btn_volver)
        self.setLayout(layout)

class Opcion2Widget(QWidget):
    def __init__(self, cambiar_pantalla):
        super().__init__()
        self.cambiar_pantalla = cambiar_pantalla

        label = QLabel("Movimientos")
        label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        label.setStyleSheet("font-size: 20px;")

        btn_volver = QPushButton("Volver al menú")
        btn_volver.clicked.connect(lambda: self.cambiar_pantalla(1))

        layout = QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(btn_volver)
        self.setLayout(layout)

class Opcion3Widget(QWidget):
    def __init__(self, cambiar_pantalla):
        super().__init__()
        self.cambiar_pantalla = cambiar_pantalla

        label = QLabel("Menu restaurante")
        label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        label.setStyleSheet("font-size: 20px;")

        btn_volver = QPushButton("Volver al menú")
        btn_volver.clicked.connect(lambda: self.cambiar_pantalla(1))

        layout = QVBoxLayout()
        layout.addWidget(label)
        layout.addWidget(btn_volver)
        self.setLayout(layout)

class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Menu")
        self.setGeometry(100, 100, 960, 540)

        self.stacked_widget = QStackedWidget()

        self.login_widget = LoginWidget(self.cambiar_pantalla)
        self.menu_widget = MenuWidget(self.cambiar_pantalla)
        self.opcion1_widget = Opcion1Widget(self.cambiar_pantalla)
        self.opcion2_widget= Opcion2Widget(self.cambiar_pantalla)
        self.opcion3_widget= Opcion3Widget(self.cambiar_pantalla)

        self.stacked_widget.addWidget(self.login_widget)    # índice 0
        self.stacked_widget.addWidget(self.menu_widget)     # índice 1
        self.stacked_widget.addWidget(self.opcion1_widget)  # índice 2
        self.stacked_widget.addWidget(self.opcion2_widget)  #indice 3
        self.stacked_widget.addWidget(self.opcion3_widget)  #indice 4

        self.setCentralWidget(self.stacked_widget)

    def cambiar_pantalla(self, index):
        self.stacked_widget.setCurrentIndex(index)

